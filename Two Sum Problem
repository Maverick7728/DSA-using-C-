/* Given an array of integer nums and an integer target, return indices of the two numbers such that they add up to the target.
   You may assume that each input would have exactly one solution, and you may not use the same element twice.
   Please feel free to return the answer in any order.

   Example 1:
   Input: nums = [2,7,11,15], target = 9
   Output: [0,1]
   Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

   Example 2:
   Input: nums = [3,2,4], target = 6
   Output: [1,2]

   Example 3:
   Input: nums = [3,3], target = 6
   Output: [0,1]
*/


Code:
#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return {i, j};
                }
            }
        }
        return {};
    }
};

int main() {
    Solution solution;
    int t;  // Number of test cases
    cout << "Enter the number of test cases: ";
    cin >> t;

    while (t--) {
        int n, target;
        cout << "\nEnter the size of the array: ";
        cin >> n;
        
        vector<int> nums(n);
        cout << "Enter the array elements: ";
        for (int i = 0; i < n; i++) {
            cin >> nums[i];
        }

        cout << "Enter the target: ";
        cin >> target;

        vector<int> result = solution.twoSum(nums, target);

        if (!result.empty()) {
            cout << "Indices: [" << result[0] << ", " << result[1] << "]" << endl;
        } else {
            cout << "No solution found." << endl;
        }
    }

    return 0;
}
