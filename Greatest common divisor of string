For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times). Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

Example 1:

Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"
Example 2:

Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"
Example 3:

Input: str1 = "LEET", str2 = "CODE"
Output: ""

Code
#include <iostream>
#include <string>
#include <algorithm>  // For std::gcd (C++17)

using namespace std;

class Solution {
public:
    string gcdOfStrings(string str1, string str2) {
        // Check if concatenation in both orders is equal
        if (str1 + str2 == str2 + str1) {
            // Return the substring of length equal to gcd of the sizes of the two strings
            return str1.substr(0, gcd(size(str1), size(str2)));
        } else {
            // If they are not concatenable, return an empty string
            return "";
        }
    }
};

int main() {
    Solution solution;
    
    string str1 = "ABCABC";
    string str2 = "ABC";
    
    string result = solution


For leetcode 
class Solution {
public:
    string gcdOfStrings(string str1, string str2) {
        return (str1 + str2 == str2 + str1)? 
        str1.substr(0, gcd(size(str1),size(str2))): "";
    }
};
